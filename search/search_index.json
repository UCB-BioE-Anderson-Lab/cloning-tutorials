{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Synthetic Biology Project Tutorials","text":"<p>Welcome to the Synthetic Biology Project Tutorials, a modular series of interactive guides covering both hands-on molecular cloning and high-level project planning. These tutorials build from DNA fundamentals to advanced techniques in cloning design, sequence analysis, experimental execution, and data management.</p>"},{"location":"#part-a-cloning-techniques","title":"Part A: Cloning Techniques","text":"<ol> <li> <p>DNA Basics    Learn about DNA structure, reverse complement operations, strandedness, plasmids, and genomes.</p> </li> <li> <p>Sequence Editing Tools    Learn to use a sequence editor (ApE, Benchling, or other tools) for finding subsequences, reverse complementing, and translating DNA.</p> </li> <li> <p>PCR Product Prediction    Manually predict PCR products using a sequence editor and understand the concept of annealing regions.</p> </li> <li> <p>PCR Simulation    Simulate the PCR reaction to reinforce concepts.</p> </li> <li> <p>Basic Cloning    Walk through traditional cloning steps.</p> </li> <li> <p>Gibson Assembly    Introduction to Gibson Assembly for seamless cloning.</p> </li> <li> <p>Golden Gate Cloning    Learn Golden Gate cloning methods.</p> </li> <li> <p>Short Parts Construction    Constructing and designing short parts and mutagenesis.</p> </li> <li> <p>Sequencing Analysis    Learn to analyze sequencing results.</p> </li> </ol>"},{"location":"#part-b-project-planning","title":"Part B: Project Planning","text":"<ol> <li> <p>Project Setup and Nomenclature    Learn how to structure a project, name experiments, and organize your working directory.</p> </li> <li> <p>Experimental Design Principles    Understand how to think about synthetic biology experiments from the ground up.</p> </li> <li> <p>Sequence Retrieval and Analysis    Use BLAST and other tools to find, analyze, and align DNA sequences for cloning.</p> </li> <li> <p>Choosing a Fabrication Strategy    Design primers and synthetic fragments for amplification and cloning.</p> </li> <li> <p>Simulation Tools    Simulate your cloning designs using the Java-based CFS tool and the web-based C6 Tools platform.</p> </li> <li> <p>Inventory and Labsheets    Organize your physical inventory and use labsheets to plan and document your experiments.</p> </li> <li> <p>Ortholog Scan  Project    Design an ortholog scan for the complex gene ispA as a capstone project, integrating bioinformatics, cloning strategy, and documentation.</p> </li> </ol> <p>Each tutorial includes step-by-step instructions, videos, and interactive examples.</p>"},{"location":"cfs_simulation/","title":"Simulation Tools: CFS &amp; C6","text":"<p>This page explains how to simulate DNA construction workflows using two tools: - CFS (Construction File Simulator) \u2014 a Java-based simulation engine. - C6 Tools \u2014 a spreadsheet-based interface using Google Sheets.</p>"},{"location":"cfs_simulation/#cfs-construction-file-simulator","title":"\ud83e\uddea CFS (Construction File Simulator)","text":"<p>CFS is a Java tool that simulates a Construction File (CF) to verify correctness of molecular biology protocols like PCR, digestion, ligation, assembly, and transformation. It detects common design issues before you build.</p>"},{"location":"cfs_simulation/#getting-started","title":"Getting Started","text":"<ol> <li>Install Java (JRE 8+).</li> <li>Download the <code>.jar</code> file from the Releases section.</li> <li>Extract <code>dist.zip</code>, if applicable.</li> </ol>"},{"location":"cfs_simulation/#usage-options","title":"Usage Options","text":"<ul> <li>Double-click <code>ConstructionFileSimulator.jar</code> to launch the GUI.</li> <li>Drag-and-drop an experiment folder onto the GUI.</li> <li>Command line (GUI launch): <pre><code>java -jar ConstructionFileSimulator.jar\n</code></pre></li> <li>Command line (direct simulation): <pre><code>java -jar ConstructionFileSimulator.jar /path/to/experiment/folder\n</code></pre></li> </ul>"},{"location":"cfs_simulation/#file-requirements","title":"File Requirements","text":"<p>A valid experiment folder must include: - A text-based Construction File - GenBank files for sequence definitions - A TSV file with part definitions (if needed)</p>"},{"location":"cfs_simulation/#output","title":"Output","text":"<p>The simulator will display: - Each intermediate step (e.g., PCR product, digested fragment) - Final output sequences - Errors or misassemblies if present</p>"},{"location":"cfs_simulation/#c6-tools-spreadsheet-based","title":"\ud83d\udcca C6 Tools (Spreadsheet-based)","text":"<p>C6 Tools is a Google Sheets-based simulation interface using built-in scripts.</p>"},{"location":"cfs_simulation/#example-layout","title":"Example Layout","text":"<p>You define steps as a grid:</p> A B C D E F <code>PCR</code> <code>P6libF</code> <code>P6libR</code> <code>pTP1</code> 3583 <code>P6</code> <code>Assemble</code> <code>P6</code> <code>BsaI</code> <code>pP6</code> <code>Transform</code> <code>pP6</code> <code>Mach1</code> <code>Carb</code> <p>Supporting rows include definitions of primers and templates below.</p>"},{"location":"cfs_simulation/#how-to-use","title":"How to Use","text":"<ol> <li>Fill in your construction steps as a grid (A6:F12 in this example).</li> <li>Run this in a new cell to parse:    <pre><code>=parseCF(A7:F12)\n</code></pre></li> <li>Simulate the build using:    <pre><code>=simCF(H8)\n</code></pre></li> </ol>"},{"location":"cfs_simulation/#output_1","title":"Output","text":"<p>The simulation will populate: - Intermediate products - Final product - Sequence output or errors</p> <p>Use these tools to validate and troubleshoot your designs before going to the bench. They are critical for catching errors early and speeding up the design-build-test cycle.</p>"},{"location":"design_principles/","title":"Experimental Design Principles","text":"<p>Construction Files, Genbank sequences, and LabSheets are a general-purpose toolkit for documenting synthetic biology experiments. They do not tell you what to build\u2014only how to record it. So the fundamental question at the start of every project is: What should you build and test?</p>"},{"location":"design_principles/#types-of-experiments","title":"Types of Experiments","text":"<p>Most synthetic biology experiments fall into two broad categories:</p>"},{"location":"design_principles/#1-prototyping","title":"1. Prototyping","text":"<p>In the prototyping stage, you are exploring new designs that haven't been tested in your system. You might have:</p> <ul> <li> <p>A gene from a database or literature</p> </li> <li> <p>A new combination of parts</p> </li> <li> <p>A hypothesis about how something will work in a cell</p> </li> </ul> <p>But no direct experience with the function in your hands.</p>"},{"location":"design_principles/#questions-to-ask","title":"Questions to Ask:","text":"<ul> <li> <p>What proteins/RNAs need to be expressed?</p> </li> <li> <p>What regulatory elements do I need?</p> </li> <li> <p>What assay tells me if it works?</p> </li> <li> <p>What controls are required for interpreting results?</p> </li> <li> <p>How many variants can I build/test given assay throughput?</p> </li> </ul>"},{"location":"design_principles/#2-optimization","title":"2. Optimization","text":"<p>Once a prototype is functional, optimization improves performance: yield, growth, stability, etc.</p>"},{"location":"design_principles/#strategies","title":"Strategies:","text":"<ul> <li> <p>Promoter Swap: Replace a promoter with variants</p> </li> <li> <p>RBS Library: Tune translation rate</p> </li> <li> <p>Ortholog Scan: Swap homologous coding sequences</p> </li> <li> <p>Terminator Scan: Adjust transcript stability</p> </li> <li> <p>Part Combination Screens: Combine multiple part variants</p> </li> </ul> <p>In our example, Lycopene33 is an optimization experiment in which we replace the existing dxs gene in a multi-gene biosynthetic pathway with orthologous dxs genes from other organisms to assess the impact on pathway performance.</p> <p>The relationship between prototyping and optimization can be thought of as a progression: prototyping produces a first working construct, and optimization refines it for better performance.</p> <p> Figure: A decision tree illustrating the progression from untested design to prototype, and from prototype to systematic part tuning and performance analysis. Optimization is an iterative process\u2014improvements identified in each round are incorporated into the next cycle, refining the design over time. In contrast, prototyping is a more linear process aimed at achieving first functionality. </p>"},{"location":"design_principles/#the-tprc-system","title":"The TP.RC System","text":"<p>To simplify modular cloning, we group parts into two classes: Traditionally, gene expression units are built using four modular parts: Promoter, RBS, CDS, and Terminator. Each of these must be mixed and matched individually during optimization, resulting in long repetitive assemblies. The TP.RC system simplifies this by collapsing the four parts into two composite modules: TP (Terminator-Promoter) and RC (RBS-CDS). This reduces the number of interchangeable parts, standardizes junctions, and enables efficient assembly of expression units using fewer, more functional blocks.</p> <p> Figure: The TP.RC model replaces traditional 4-part gene units with streamlined 2-part modules. Each TP and RC part corresponds to untranscribed and transcribed regions of DNA, respectively\u2014rather than neatly mapping to a single gene. This architecture enables construction of multicistronic operons by placing multiple RC units in sequence, and allows changes to transcriptional architecture via singular additions or removals of TP parts. The reduced part count simplifies optimization while preserving full design flexibility.</p>"},{"location":"design_principles/#planning-an-optimization-experiment","title":"Planning an Optimization Experiment","text":"<p>In practice, optimization is often performed without a specific hypothesis about what part is limiting. Instead, it is a form of sensitivity analysis\u2014each position in a construct is systematically tested for influence on performance. Rather than identifying a bottleneck beforehand, you vary elements (e.g., promoters, RC units) at selected sites and measure the resulting impact. This allows you to discover which parts are rate-limiting or overly active and informs future engineering steps.</p> <p>The typical optimization workflow involves:</p> <ol> <li> <p>Selecting a position in the construct to diversify</p> </li> <li> <p>Choosing a part type to vary (e.g., promoter, RC unit)</p> </li> <li> <p>Designing a panel of alternative sequences</p> </li> <li> <p>Building variants using Construction Files</p> </li> <li> <p>Running assays and interpreting results</p> </li> <li> <p>Updating designs based on observed trends</p> </li> </ol> <p>These small focused scans yield interpretable results and inform future designs.</p>"},{"location":"design_principles/#ortholog-scans-and-rc-replacement","title":"Ortholog Scans and RC Replacement","text":"<p>An ortholog scan is a type of RC swap. The goal is to replace an existing RBS-CDS module with alternative homologs of the same protein from other organisms. Each ortholog is paired with a designed RBS to form a new RC unit.</p> <p>In practice:</p> <ul> <li> <p>You identify target orthologs using BLAST</p> </li> <li> <p>Design or adapt RBSs</p> </li> <li> <p>Clone them into the backbone using Golden Gate or Gibson</p> </li> </ul> <p> Figure: A biosynthetic pathway made of multiple TP.RC units is shown. In this ortholog scan, a single RC unit is replaced with variants sourced from gorilla, orca, and alligator. Expression output (product titer) is quantified at right. The alligator ortholog significantly outperforms the others, demonstrating how targeted RC swaps can boost pathway productivity.</p>"},{"location":"design_principles/#anatomy-of-tp-and-rc-parts","title":"Anatomy of TP and RC Parts","text":"<p>The TP.RC system follows a standardized layout compatible with the MoClo Golden Gate standard. Each part includes flanking type IIS restriction sites and 5 bp overhangs that define junctions and ensure consistent assembly order.</p> <p>The diagram below illustrates the structure of TP and RC parts, showing BsaI sites, MoClo overhangs, and internal linkers for amplification and sequencing.</p>"},{"location":"design_principles/#tp-terminator-promoter-parts","title":"TP (Terminator-Promoter) Parts","text":"<p>These combine a terminator from the previous gene with a promoter for the next one. The TP unit terminates transcription upstream and initiates transcription downstream. The sequence is flanked by linkers and BsaI sites to facilitate cloning.  There is also a 3rd unique linker between the promoter and terminator that serves as a site for sequencing over the promoter-RBS junction in the final construct.</p>"},{"location":"design_principles/#rc-rbs-cds-parts","title":"RC (RBS-CDS) Parts","text":"<p>These include a ribosome binding site and a coding sequence. The cassette is flanked by unique linker elements to facilitate modification of adjacent parts and terminated by BsaI sites on both ends.</p> <p>Each linker (sometimes also called a spacer) is a unique 20 bp DNA sequence chosen for its uniqueness and suitability for priming PCR. These regions are often derived from validated qPCR primer sets and placed at fixed positions in each part.</p> <p>These linkers allow:</p> <ul> <li> <p>Reliable cycle sequencing from fixed, well-placed anchor points</p> </li> <li> <p>Selective amplification of the backbone via PCR to modify individual parts</p> </li> <li> <p>Homology regions for Gibson, SOEing, or Yeast recombination-based cloning</p> </li> </ul> <p></p> <p>Figure: Layout of TP and RC parts showing the role of unique linkers and MoClo overhangs. Each part includes type IIS flanking sites and 5' overhangs for ordered assembly.</p>"},{"location":"design_principles/#quiz-building-an-rc-part","title":"Quiz: Building an RC Part","text":"<p>Given the following design inputs, construct a valid RC part sequence for Golden Gate assembly. Use the following conventions:</p> <ul> <li> <p>5' BsaI site (recall you need 1 more base between this and the sticky end): <code>GGTCTC</code></p> </li> <li> <p>MoClo overhangs (sticky ends): <code>tact</code> (5') and <code>gctt</code> (3')</p> </li> <li> <p>5' Spacer: <code>CAAATGTACGGCCAGCAACG</code></p> </li> <li> <p>3' Spacer: <code>GCACACCGTGGAAACGGATG</code></p> </li> <li> <p>RBS: <code>gagaaagaggagaaatactag</code></p> </li> <li> <p>CDS (start to stop): <code>ATGGCGTCTGACAGGAGCGTAA</code></p> </li> <li> <p>Don't forget to add 5 bp tails on both ends of the DNA!</p> </li> </ul>"},{"location":"design_principles/#enter-your-rc-part-sequence-here","title":"\u270d\ufe0f Enter your RC part sequence here:","text":"<p> Check Answer</p> <p></p> <p>When designing synthetic biology experiments using the TP.RC system, you don\u2019t need to make early decisions about exactly how each part will be used. As long as you follow the conventions for TP and RC design\u2014using appropriate placed unique linkers, BsaI sites, and standardized overhangs\u2014you can easily mix and match parts later. RC and TP units can be swapped, reordered, added, or removed without redesigning the parts. This flexibility simplifies both prototyping and optimization workflows.</p> <p>There are multiple valid strategies for constructing TP and RC parts. You can order them as synthetic gene blocks (GBlocks) with overhangs and tails already included, clone them from genomic DNA or existing plasmids using primers that append the necessary BsaI sites, or obtain them through clonal gene synthesis. Regardless of the method, the outcome is the same: a reusable TP or RC module that integrates seamlessly into modular assemblies, enabling rapid iteration and design reuse.</p>"},{"location":"dna_basics/","title":"DNA Basics and Molecular Biology Refresher","text":""},{"location":"dna_basics/#dna-structure-and-the-reverse-complement-function","title":"DNA Structure and the Reverse Complement Function","text":"<p>DNA is a double-stranded molecule arranged in an antiparallel fashion, meaning one strand runs in the 5' to 3' direction while its complementary strand runs in the 3' to 5' direction. The two strands are held together by base pairing: Adenine (A) pairs with Thymine (T), and Cytosine (C) pairs with Guanine (G). These fundamental properties allow for key sequence operations like reversing and complementing strands. To understand this structure visually, watch the video below:</p>"},{"location":"dna_basics/#reverse","title":"Reverse","text":"<p>To reverse a DNA sequence, simply write it backward. For example: - Original: <code>5'- ATGCAG -3'</code> - Reversed: <code>5'- GACGTA -3'</code></p>"},{"location":"dna_basics/#complement","title":"Complement","text":"<p>To complement a DNA sequence, replace each base with its pairing base: - A (Adenine) \u2194 T (Thymine) - C (Cytosine) \u2194 G (Guanine)</p> <p>Example: - Original: <code>5'- ATGCAG -3'</code> - Complement: <code>5'- TACGTC -3'</code></p>"},{"location":"dna_basics/#reverse-complement","title":"Reverse Complement","text":"<p>The reverse complement is simply applying the complement rule after reversing the sequence: 1. Reverse the sequence. 2. Replace each base with its complementary base.</p> <p>Example: - Original: <code>5'- ATGCAG -3'</code> - Step 1 (Reverse): <code>5'- GACGTA -3'</code> - Step 2 (Complement): <code>5'- CTGCAT -3'</code></p> <p>Since DNA is double-stranded, the reverse complement operation essentially determines what the partner strand would look like. When we take the reverse complement of a sequence, we are simulating the process of reading the opposite strand in the correct 5' to 3' direction, just as it would naturally exist in a DNA molecule. Calculating the reverse complement is a very common operation when working with DNA sequence.  However, reverse and complement, individually, are only used in specialized scenarios.  It is important you understand what these operations are, but it is mainly so you understand the composite of the two.  For the purposes of this tutorial, you will never use individual reverse or complement operations again.</p>"},{"location":"dna_basics/#try-it-yourself","title":"Try it Yourself","text":"<p>Try calculating the Reverse, Complement, and Reverse Complement of these sequences:</p>"},{"location":"dna_basics/#1-reverse","title":"1\ufe0f\u20e3 Reverse","text":"<p>What is the reverse of 5'- AGCTTG -3'? Check Answer</p> <p></p>"},{"location":"dna_basics/#2-complement","title":"2\ufe0f\u20e3 Complement","text":"<p>What is the complement of 5'- AGCTTG -3'? Check Answer</p> <p></p>"},{"location":"dna_basics/#3-reverse-complement","title":"3\ufe0f\u20e3 Reverse Complement","text":"<p>What is the reverse complement of 5'- CAGGTAG -3'? Check Answer</p> <p></p>"},{"location":"dna_basics/#the-central-dogma","title":"The Central Dogma","text":"<p>The Central Dogma of molecular biology describes 3 biochemical processes happening to biomolecules in most cells. During Replication, an exact copy of DNA is produced. During Transcription, a region of DNA is read into RNA. During Translation, a region of RNA (an mRNA or messenger RNA) is read into protein. Though these processes are very complex and involve numerous biomolecules, the sequences of RNA and protein are readily predictable from the DNA sequence.</p>"},{"location":"dna_basics/#transcription","title":"Transcription","text":"<p>A gene refers to a region of DNA that encodes a protein. You can think of it like a song on a vinyl record\u2014there is a physical region to the gene, with clear starts and ends. A gene can be on either strand of DNA, but it is always flanked by a promoter and a terminator sequence. The promoter determines which strand will be the \"coding strand,\" as the RNA polymerase binds to the promoter and proceeds until it reaches the terminator. </p> <p>During transcription, an RNA molecule is created that is identical to the coding strand but with Uracil (U) replacing Thymine (T).</p> <p>Example: - DNA Coding Strand: <code>5'- ATGCAGTAC -3'</code> - RNA Transcript: <code>5'- AUGCAGUAC -3'</code></p>"},{"location":"dna_basics/#quiz-predict-the-rna-sequence","title":"Quiz: Predict the RNA Sequence","text":"<p>What is the RNA sequence transcribed from this DNA coding strand? 5'- TCTGACTA -3'</p> Check Answer <p></p>"},{"location":"dna_basics/#translation","title":"Translation","text":"<p>An mRNA transcript consists of a 5' UTR (Untranslated Region) followed by the CDS (Coding DNA Sequence). The CDS is an ORF (Open Reading Frame), meaning a sequence that, when read in groups of three bases (codons), begins with a start codon (ATG, GTG, or TTG) and ends with a stop codon (TAA, TAG, TGA).</p> <p>The ribosome recognizes the Shine-Dalgarno sequence and the start codon, then reads the RNA three bases at a time, translating each codon into an amino acid based on the genetic code.</p>"},{"location":"dna_basics/#genetic-code-table","title":"Genetic Code Table","text":"<p>Note: While translation occurs from an RNA sequence, for convenience, we often refer to codons in their DNA format. Codons are three-letter sequences that specify amino acids during protein synthesis. Each codon in DNA corresponds to an RNA codon by replacing Thymine (T) with Uracil (U).</p> Codon Single Letter Full Name Codon Single Letter Full Name TTT F Phe TTC F Phe TTA L Leu TTG L Leu TCT S Ser TCC S Ser TCA S Ser TCG S Ser TAT Y Tyr TAC Y Tyr TAA stop Ter TAG stop Ter TGT C Cys TGC C Cys TGA stop Ter TGG W Trp CTT L Leu CTC L Leu CTA L Leu CTG L Leu CCT P Pro CCC P Pro CCA P Pro CCG P Pro CAT H His CAC H His CAA Q Gln CAG Q Gln CGT R Arg CGC R Arg CGA R Arg CGG R Arg ATT I Ile ATC I Ile ATA I Ile ATG M Met ACT T Thr ACC T Thr ACA T Thr ACG T Thr AAT N Asn AAC N Asn AAA K Lys AAG K Lys AGT S Ser AGC S Ser AGA R Arg AGG R Arg GTT V Val GTC V Val GTA V Val GTG V Val GCT A Ala GCC A Ala GCA A Ala GCG A Ala GAT D Asp GAC D Asp GAA E Glu GAG E Glu GGT G Gly GGC G Gly GGA G Gly GGG G Gly"},{"location":"dna_basics/#quiz-translate-the-dna-sequence","title":"Quiz: Translate the DNA Sequence","text":"<p>What is the amino acid sequence for the following DNA sequence? 5'- ATG CAG GTA GAA TAA -3'</p> Check Answer <p></p>"},{"location":"dna_basics/#summary-of-terms","title":"Summary of Terms","text":""},{"location":"dna_basics/#fundamental-dna-concepts","title":"Fundamental DNA Concepts","text":"<ul> <li>DNA (Deoxyribonucleic Acid): A double-stranded molecule that stores genetic information in all living organisms.</li> <li>Base Pairing: The specific hydrogen bonding between Adenine (A) &amp; Thymine (T) and Cytosine (C) &amp; Guanine (G) in DNA.</li> <li>Antiparallel: The orientation of DNA strands where one runs 5' to 3' and the complementary strand runs 3' to 5'.</li> </ul>"},{"location":"dna_basics/#transcription-rna-concepts","title":"Transcription &amp; RNA Concepts","text":"<ul> <li>RNA (Ribonucleic Acid): A single-stranded nucleic acid transcribed from DNA, involved in protein synthesis.</li> <li>Transcription: The process where RNA polymerase synthesizes RNA from a DNA template.</li> <li>RNA Polymerase: The enzyme that transcribes DNA into RNA.</li> <li>mRNA (Messenger RNA): The RNA transcript that carries genetic information from DNA to ribosomes.</li> <li>5' UTR (Untranslated Region): The non-coding region at the start of an mRNA that regulates translation.</li> <li>3' UTR (Untranslated Region): The non-coding region at the end of an mRNA that influences stability and translation efficiency.</li> <li>Promoter: A DNA sequence where RNA polymerase binds to start transcription.</li> <li>Terminator: A DNA sequence signaling the end of transcription.</li> </ul>"},{"location":"dna_basics/#translation-protein-synthesis","title":"Translation &amp; Protein Synthesis","text":"<ul> <li>Translation: The process where ribosomes synthesize proteins by reading mRNA codons.</li> <li>Ribosome: The molecular machine that assembles proteins by reading mRNA codons.</li> <li>tRNA (Transfer RNA): An RNA molecule that brings amino acids to the ribosome during translation.</li> <li>Codon: A three-nucleotide sequence in DNA or RNA that specifies an amino acid or stop signal.</li> <li>Anticodon: A complementary three-base sequence on tRNA that pairs with an mRNA codon.</li> <li>Start Codon: The first codon in an mRNA sequence that signals the beginning of translation (ATG coding for Methionine).</li> <li>Stop Codon: A codon (TAA, TAG, TGA) that signals the termination of translation.</li> </ul>"},{"location":"dna_basics/#gene-structure-regulation","title":"Gene Structure &amp; Regulation","text":"<ul> <li>Gene: A specific region of DNA that encodes a functional product, usually a protein.</li> <li>CDS (Coding DNA Sequence): The protein-coding portion of a gene within an mRNA.</li> <li>Open Reading Frame (ORF): A sequence of codons beginning with a start codon and ending with a stop codon.</li> <li>Ribosome Binding Site (RBS): A region on mRNA where the ribosome binds to initiate translation. In prokaryotes, this includes the Shine-Dalgarno sequence, while in eukaryotes, it is often the Kozak sequence.</li> <li>Shine-Dalgarno Sequence (SD): A ribosomal binding site in bacterial mRNA, located upstream of the start codon, which aligns the ribosome for efficient translation initiation.</li> <li>Kozak Sequence: A sequence surrounding the start codon in eukaryotic mRNA that enhances ribosome recognition and translation efficiency.</li> </ul>"},{"location":"inventory_labsheets/","title":"Inventory and LabSheets","text":"<p>At this stage, you\u2019ve designed your oligos, written construction files, and confirmed the molecular biology is theoretically sound. With the experimental design finalized, it\u2019s time to order materials and plan lab work. This includes selecting protocols, identifying required samples, and specifying where to find them.</p> <p>You will generate two key documents:</p> <ul> <li> <p>Inventory: Tracks all DNA samples and reagents used or created in the project.</p> </li> <li> <p>LabSheet: A lab-ready checklist detailing the experimental workflow.</p> </li> </ul> <p>Examples of the completed ones for lycopene33 are available: Inventory LabSheets</p> <p>To illustrate, consider the construction plans for the lycopene33 project:</p> <pre><code>PCR         GB5F     GB5R     pLYC72I    back72\nGoldenGate  pTpDXS   back72   BsaI       ggTp\nTransform   ggTp     Mach1    Amp        37     pLYC76\n</code></pre> <p><pre><code>PCR         oAfDXSf  oAfDXSr  CP160629   pcrAf\nPCR         GB5F     GB5R     pLYC72I    back72\nGoldenGate  pcrAf    back72   BsaI       ggAf\nTransform   ggAf     Mach1    Amp        37     pLYC77\n</code></pre> In a construction file (CF), the final item on each line (e.g., <code>ggTp</code>, <code>ggAf</code>, <code>pLYC76</code>, etc.) represents an output\u2014a DNA product that does not yet exist but will be generated during the experiment. Conversely, inputs include materials like primers, template plasmids, gene synthesis fragments, and genomic DNA (e.g., <code>GB5F</code>, <code>pLYC72I</code>, <code>CP160629</code>, <code>oAfDXSf</code>). These are either already in your inventory or will be shortly after ordering.</p> <p>Let\u2019s focus on the inputs. Some are carryovers from previous experiments and are already cataloged. Their locations can be found in the project folder\u2019s inventory files:</p> <ul> <li><code>pLYC72I</code>: Prototype plasmid \u2192 Box33 / B2</li> <li><code>CP160629</code>: Genomic DNA from Aliivibrio fischeri \u2192 Box33 / B1</li> </ul> <p>This notation means: Row B (second row, starting from A), Column 2 (counting from 1) in a box labeled <code>Box33</code>.</p> <pre><code>&gt;&gt;construct    1           2           3     4     5     6\nA\nB              CP160629    pLYC72I\nC\nD\n</code></pre> <p>The remaining inputs\u2014four oligos and one gene synthesis\u2014will arrive lyophilized in labeled screw-cap tubes. Though they\u2019re not yet in the inventory, we\u2019ll assign them storage positions in advance. While there\u2019s no strict rule for box arrangement, grouping similar items (e.g., oligos in Row A) makes retrieval easier:</p> <ul> <li><code>GB5F</code> \u2192 Box33 / A1</li> <li><code>GB5R</code> \u2192 Box33 / A2</li> <li><code>oAfDXSf</code> \u2192 Box33 / A3</li> <li><code>oAfDXSr</code> \u2192 Box33 / A4</li> <li><code>pTpDXS</code> \u2192 Box33 / B3</li> </ul> <pre><code>&gt;&gt;construct    1           2           3           4           5     6\nA              GB5F        GB5R        oAfDXSf     oAfDXSr\nB              CP160629    pLYC72I     pTpDXS\nC\nD\n</code></pre> <p>Note: The <code>&gt;&gt;construct</code> label reflects the name used in construction files. Each construct name maps to a specific DNA sequence but doesn't include metadata like concentration, purity, or tube labeling. To find usable materials, match the name under <code>construct</code> with your file, then check label and concentration details to choose the best sample.</p> <p>Now that the stage is set, let\u2019s plan the actual lab work. Construction files (CFs) are organized in chronological order, where later steps often depend on earlier ones. In both CFs, the first operation is a PCR, so our first lab session will begin with setting up those reactions.</p> <p>Reviewing both CFs, we extract all PCR steps:</p> <pre><code>PCR  GB5F     GB5R     pLYC72I   back72\nPCR  oAfDXSf  oAfDXSr  CP160629  pcrAf\nPCR  GB5F     GB5R     pLYC72I   back72\n</code></pre> <p>The first and third steps are identical\u2014no need to repeat the reaction. A single PCR yields far more material than needed, so we only need to run two PCRs:</p> <pre><code>PCR  GB5F     GB5R     pLYC72I   back72\nPCR  oAfDXSf  oAfDXSr  CP160629  pcrAf\n</code></pre> <p>These PCRs are independent and can be run in parallel. We\u2019ll document this in a single PCR LabSheet for our first lab session.</p> <p>The PCR LabSheet will guide you through this workflow:</p> <ol> <li> <p>Fetch all required materials.</p> </li> <li> <p>Resuspend and dilute DNA samples as needed.</p> </li> <li> <p>Prepare PCR reactions with: water, buffer, dNTPs, primer1, primer2, template, and polymerase.</p> </li> <li> <p>Run the appropriate thermocycler program.</p> </li> <li> <p>Return all materials to their proper storage.</p> </li> </ol> <p>The LabSheet will be structured accordingly in the following sections:</p> <ul> <li> <p>Sources</p> </li> <li> <p>Dilutions</p> </li> <li> <p>Reactions</p> </li> <li> <p>Program</p> </li> <li> <p>Destinations</p> </li> </ul>"},{"location":"inventory_labsheets/#sources","title":"Sources","text":"<p>Before setting up PCRs, collect all required DNA materials. Some items may already be in the inventory, while others will arrive lyophilized and need to be resuspended and labeled. Stock oligos are resuspended to 100 \u00b5M; PCR dilutions are typically 10 \u00b5M. Use existing dilutions if available; otherwise, make new ones from stock. For plasmids, use either a miniprep or a dilution (if prior dilution exists and is effective). Be sure to specify the clone being used when applicable.</p> <pre><code>label       side-label             construct      clone   concentration   location\nGB5F        GB5F                   GB5F                   lyophilized     \u2013\nGB5R        GB5R                   GB5R                   lyophilized     \u2013\noAfDXSf     oAfDXSf                oAfDXSf                lyophilized     \u2013\noAfDXSr     oAfDXSr                oAfDXSr                lyophilized     \u2013\npTpDXS      pTpDXS                 pTpDXS                 lyophilized     \u2013\npLYC72I     pLYC72I-A              pLYC72I        A       miniprep        Box33/B2\nAf gen.     Aliivibrio fischeri    CP160629               miniprep        Box33/B1\n</code></pre>"},{"location":"inventory_labsheets/#dilutions","title":"Dilutions","text":"<p>Dilution is required for any oligos without existing 10 \u00b5M tubes. Resuspend each oligo stock using the nmol value written on the tube (add 10 \u00b5L per nmol). Dilute to working concentration as needed.</p> <pre><code>label           side-label         construct      concentration\nGB5F            GB5F               GB5F           100 \u00b5M\nGB5R            GB5R               GB5R           100 \u00b5M\noAfDXSf         oAfDXSf            oAfDXSf        100 \u00b5M\noAfDXSr         oAfDXSr            oAfDXSr        100 \u00b5M\n10uM GB5F       10uM GB5F          GB5F           10 \u00b5M\n10uM GB5R       10uM GB5R          GB5R           10 \u00b5M\n10uM oAfDXSf    10uM oAfDXSf       oAfDXSf        10 \u00b5M\n10uM oAfDXSr    10uM oAfDXSr       oAfDXSr        10 \u00b5M\npTpDXS          pTpDXS             pTpDXS         miniprep\n</code></pre>"},{"location":"inventory_labsheets/#reactions","title":"Reactions","text":"<p>Each PCR to be performed is defined in the table below. Use label names that fit on the PCR tube caps\u2014short, unique, and easy to recognize.</p> <pre><code>label   primer1         primer2         template        product\nb72     10uM GB5F       10uM GB5R       pLYC72I         back72\nAf      10uM oAfDXSf    10uM oAfDXSr    Af gen.         pcrAf\n</code></pre>"},{"location":"inventory_labsheets/#program","title":"Program","text":"<p>Not all PCRs use the same thermocycler program. When creating a LabSheet, we define the first attempt program for each PCR based on the expected product size. Actual success may vary, and adjustments like annealing temperature tweaks can be made in follow-up experiments and documented in the experimental issue.</p> <p>At the planning stage, the main variable to consider is product length. Using C6-Tools, we calculate:</p>"},{"location":"inventory_labsheets/#pcr-product-sizes","title":"PCR Product Sizes","text":"Product Size (bp) pcrAF 1,989 back72 14,055 <p>These products differ significantly in size, so we refer to the PrimeStar GXL cycling program chart to select the appropriate thermocycler settings.</p>"},{"location":"inventory_labsheets/#primestar-gxl-decision-chart","title":"PrimeStar GXL Decision Chart","text":"Program Size Range PG2K55 Up to 2 kb PG4K55 2\u20134 kb PG6K55 4\u20136 kb PG8K55 6\u20138 kb PGXL4 &gt;8 kb <p>PrimeStar GXL is our standard polymerase for cloning due to its high fidelity and ability to amplify long templates (up to ~30 kb). Other polymerases (e.g., Phusion) can be used, but would require selecting a compatible protocol and explicitly writing that into the LabSheet and thermocycler software.</p>"},{"location":"inventory_labsheets/#assigned-programs","title":"Assigned Programs","text":"<pre><code>protocol: PrimeStar\n\nlabel   program\nAf      PG2K55\nB72     PGXL4\n</code></pre>"},{"location":"inventory_labsheets/#destinations","title":"Destinations","text":"<p>Some samples go back into inventory; others can be discarded. Any tubes listed in the Sources section are returned to their original storage, so they don\u2019t need to be listed again. Reaction tubes (e.g., PCR, digestion, ligation, transformation) are temporary and get discarded\u2014these do not need destination entries.</p> <p>Oligo stocks (100 \u00b5M) should always be saved and listed in destinations. Diluted oligos (10 \u00b5M) can be discarded unless you plan to reuse them\u2014it's easy to remake them from the 100 \u00b5M stock. Later in the experiment, you\u2019ll generate cleaned-up PCR products (e.g., via Zymo cleanup); these should be saved until the project is complete, for troubleshooting. You\u2019ll also generate minipreps; you won\u2019t know how many in advance, but all minipreps that contribute to sequencing should be saved.</p> <p>For the lycopene33 project, we\u2019ll discard the 10 \u00b5M dilutions. The new inventory destinations are:</p> <pre><code>label       location    side-label   construct   concentration\nGB5F        Box33/A1    GB5F         GB5F        100 \u00b5M\nGB5R        Box33/A2    GB5R         GB5R        100 \u00b5M\noAfDXSf     Box33/A3    oAfDXSf      oAfDXSf     100 \u00b5M\noAfDXSr     Box33/A4    oAfDXSr      oAfDXSr     100 \u00b5M\npTpDXS      Box33/B3    pTpDXS       pTpDXS      miniprep\n</code></pre> <p>Now we can finalize the LabSheet and add it to the project folder. There\u2019s no fixed format or file type required, but spreadsheets tend to be the most practical. I often include extra notes or protocol guidance depending on the audience\u2014for example, the pP6 labsheets included extensive documentation. When making sheets for myself, I typically just include the tables, as I already know what to do. Don\u2019t forget to update your Box33 inventory file.</p>"},{"location":"inventory_labsheets/#gel-and-zymo-labsheets","title":"Gel and Zymo Labsheets","text":"<p>PCR is just the beginning. After running a PCR, I usually follow up with a gel to assess success. If the results look good, I proceed with a Zymo cleanup. These steps are not dictated by the construction file\u2014other options exist. Gels are purely analytical and can be replaced by dye-binding assays or other quantification methods. Similarly, alternative DNA purification methods exist besides Zymo columns.</p> <p>Our next labsheets will document gel runs and Zymo cleanups. These are straightforward:</p> <ul> <li> <p>Each PCR product gets one row in the gel sheet and one in the Zymo sheet.</p> </li> <li> <p>On the gel sheet, list the expected DNA sizes.</p> </li> </ul> <pre><code>reaction    size    product\nAf          1989    pcrAf\nB72         14055   back72\n</code></pre> <p>For the Zymo sheet, you\u2019ll record each cleaned-up product and assign a tube label and inventory destination. These go into 1.5 mL tubes, with both a top and side label.</p> <pre><code>reaction    label   side_label     elution_volume  construct   destination\nAf          zAf     zAF pcrAf      25 uL           pcrAF       Box33/C1\nb72         zB72    zB72 back72    25 uL           back72      Box33/C2\n</code></pre>"},{"location":"inventory_labsheets/#assembly-labsheets","title":"Assembly Labsheets","text":"<p>Assembly labsheets (Gibson or Golden Gate) include:</p> <ul> <li>Sources</li> <li>Reactions</li> <li>Program</li> </ul> <p>Sources consist of cleaned-up PCR products (Zymo samples) and any Gblocks or synthetic plasmids that go directly into the assembly.</p> <p>For lycopene33, we plan two Golden Gate reactions that can be performed in parallel:</p> <pre><code>GoldenGate  pTpDXS   back72   BsaI   ggTp\nGoldenGate  pcrAf    back72   BsaI   ggAf\n</code></pre> <p>Sources for these assemblies:</p> <pre><code>label     side-label      construct   clone   concentration   location\nzAf       zAF pcrAf       pcrAF       -       zymo            Box33/C1\nzB72      zB72 back72     back72      -       zymo            Box33/C2\npTpDXS    pTpDXS          pTpDXS      -       miniprep        Box33/B3\n</code></pre> <p>Golden Gate reactions use the <code>main/GG1</code> thermocycler program:</p> <pre><code>program: main/GG1\n</code></pre>"},{"location":"inventory_labsheets/#transformation-picking-miniprepping-and-sequencing-labsheets","title":"Transformation, Picking, Miniprepping, and Sequencing Labsheets","text":"<p>These next steps happen on a per-sample basis. For lycopene33, we have 2 assembly reactions, so we\u2019ll:</p> <ul> <li> <p>Transform each assembly.</p> </li> <li> <p>Pick 4 colonies from each.</p> </li> <li> <p>Miniprep all resulting colonies.</p> </li> </ul> <p>Sequencing plans are context-dependent. If the modified plasmid region is under 800 bp, a single Sanger read may cover the entire region. To prepare, identify existing oligos that can sequence through your region of interest. You may need to order new primers if none exist.</p> <p>In the TP.RC system, each part is flanked by unique linker sequences, which provide good priming sites for sequencing. Sequencing read quality typically becomes reliable ~50 bp downstream of the primer\u2019s 3\u2032 end\u2014plan primer locations accordingly.</p> <p>You may need multiple reads to cover the entire region. Consider:</p> <ul> <li> <p>Function matters: If your construct is functionally confirmed, you may tolerate silent mutations.</p> </li> <li> <p>Read efficiency: A partial but perfect read may be enough for confidence.</p> </li> <li> <p>Cost: If more than 3 reads are required, it may be cheaper to sequence the full plasmid instead of using multiple cycle sequencing reactions.</p> </li> </ul>"},{"location":"inventory_labsheets/#assay-labsheets","title":"Assay Labsheets","text":"<p>Until now, we\u2019ve focused only on labsheets for the fabrication phase. Eventually, you\u2019ll also perform assays to determine whether your DNA constructs are functional. Assay design is highly experiment-specific.</p> <p>For lycopene, visual inspection (e.g., colony redness) can be informative. You might also run an acetone extraction and measure color intensity using a spectrophotometer. There\u2019s no standard format for an assay labsheet, but it should clearly outline the protocol steps, including:</p> <ul> <li> <p>Required materials and equipment</p> </li> <li> <p>Measurement procedure</p> </li> <li> <p>Data to be recorded</p> </li> </ul> <p>Be sure to include positive and negative controls:</p> <ul> <li> <p>For optimization, wild-type (unmodified) cells make a good negative control.</p> </li> <li> <p>A prototype plasmid (e.g., pLYC72I) serves as a strong positive control.</p> </li> </ul> <p>These controls help you compare your new designs directly against known standards.</p> <p>Also consider replicates:</p> <ul> <li> <p>Technical replicates: Repeat the measurement from the same culture to estimate measurement error (e.g., split one culture into multiple wells).</p> </li> <li> <p>Biological replicates: Pick multiple clones from a transformation plate. These may differ due to mutation or background plasmid, so expect variability.</p> </li> </ul> <p>Standard deviation from technical replicates reflects measurement noise. However, if biological replicates yield similar results, that provides strong support for a consistent and intended phenotype.</p> <p>By now, you\u2019ve planned your experimental workflow from design through fabrication and into functional testing. Your inventory and labsheets are not just planning tools\u2014they are your lab notebook. As experiments unfold, update them directly with any deviations. Six months from now, when questions arise, this is where you\u2019ll look to recall exactly what was done, which samples were used, and how things were carried out. Keep them clear, complete, and current to ensure your work remains reproducible and understandable well into the future.</p>"},{"location":"oligo_design/","title":"Choosing a Fabrication Strategy","text":"<p>Once you've finalized your RC part design (e.g., RBS.CDS), it's time to decide how you'll turn that design into actual DNA. This section walks you through the decision process for choosing a fabrication strategy and explains how to encode that strategy in a Construction File (CF).</p>"},{"location":"oligo_design/#step-1-organize-your-source-sequences","title":"\ud83e\uddec Step 1: Organize Your Source SequencesTpDXS RC Part","text":"<p>Before starting oligo design, ensure your GenBank files are saved and annotated. These should live in the <code>Maps/</code> folder of your GitHub repo.</p> <p>For the Lycopene33 example, we\u2019ll focus on an RC part derived from the dxs ortholog of:</p> <p>Trueperella pyogenes strain TP1 GenBank: CP033902.1 Coordinates: 656655\u2013658523 NCBI Link</p> <p>You\u2019ve already discussed this sequence, selected a suitable RBS, and formatted it as a standardized RC part following TP.RC conventions. A visual reminder of the completed part is shown below:</p> <p>The corresponding DNA sequence files is included in the example Maps folder for reference.</p> <ul> <li>CP033902.seq: The raw sequence of the region of the Trueperella genome containing the dxs CDS and flanking sequences</li> <li>gTpDXS.seq: A GBlock encoding an RC (rbs.cds) part encoding the Trueperella sequence with restriction sites removed</li> <li>pTpDXS.seq: A clonal gene synthesis plasmid encoding the restriction site-free part</li> </ul>"},{"location":"oligo_design/#step-2-choose-a-fabrication-strategy","title":"\ud83e\udded Step 2: Choose a Fabrication Strategy","text":"<p>There are three main fabrication routes based on the type of DNA product you'll use:</p>"},{"location":"oligo_design/#summary-table","title":"\ud83d\udccc Summary Table","text":"Strategy DNA Input When to Use Gene Synthesis Clonal plasmid Long, complex sequences or many internal sites gBlocks dsDNA fragment Mid-sized parts, fast delivery, no template Oligo-Based PCR Short oligos You have a template and want to modify or amplify a region"},{"location":"oligo_design/#decision-tree","title":"\ud83e\uddf0 Decision Tree","text":"<pre><code>[Start]\n   |\n   |-- Do you have source DNA?\n   |        |-- Yes\n   |        |     |-- Does the sequence contain internal BsaI/BsmBI sites?\n   |        |           |-- Yes --&gt; Consider gBlock or gene synthesis\n   |        |           |-- No  --&gt; Use PCR or oligo-based cloning\n   |        |\n   |        |-- No\n   |             |-- Is the part short (&lt;1.5 kb)?\n   |                     |-- Yes --&gt; Order as gBlock\n   |                     |-- No  --&gt; Order full gene synthesis\n</code></pre>"},{"location":"oligo_design/#gene-synthesis-clonal","title":"\ud83e\uddeb Gene Synthesis (Clonal)","text":"<ul> <li>Vendors typically deliver your insert in a clonal plasmid with an ampR/pUC origin, though a panel of other vectors may be available.</li> <li>If doing Golden Gate, you can directly assemble using the provided plasmid, but be sure to use a recipient backbone with a different antibiotic marker (e.g., kanamycin or chloramphenicol if the insert plasmid is ampicillin-resistant).</li> <li>You can also PCR out the insert and use it in Gibson or Golden Gate.</li> <li>Best suited for large parts or sequences with multiple internal restriction sites.</li> <li>Turnaround time is typically 2+ weeks.</li> </ul> <p>\ud83d\udca1 If your synthesis request is rejected, use the IDT or Twist codon optimization tools to automatically adjust your CDS to fit synthesis constraints.</p> <p>CF Example (gene synthesis with Golden Gate): <pre><code>PCR GB5F GB5R pLYC72I back72\nGoldenGate pTpDXS back72 BsaI ggTp\nTransform ggTp Mach1 Amp 37 pLYC76\n</code></pre> With these oligo sequences: <pre><code>oligo GB5F ccataGGTCTCaGCTTTGATCGATTCAACCTCTGATCA\noligo GB5R cagttGGTCTCtAGTACCTCTAAACACAACGACAACAG\n</code></pre></p> <p>Where <code>pTpDXS</code> is the plasmid obtained by gene synthesis.</p>"},{"location":"oligo_design/#gblocks-dsdna-fragments","title":"\ud83e\uddec gBlocks (dsDNA Fragments)","text":"<ul> <li>High-fidelity, non-clonal double-stranded DNA fragments ordered directly from synthesis providers.</li> <li>Ideal for medium-length constructs (e.g., &lt;1.5 kb) and faster turnaround than full gene synthesis.</li> <li>Can be assembled directly using Gibson or Golden Gate.</li> <li>Not suitable as PCR templates (not clonal, risk of errors or contamination).</li> </ul> <p>\ud83d\udca1 The dxs ortholog from T. pyogenes contains an internal BsaI site, making it a good candidate for synthesis as a gBlock followed by Gibson Assembly.</p> <p>CF Example (gBlock with Gibson): <pre><code>PCR YB5F YB5R pLYC72I yback72\nGibson gTpDXS yback72 ggTp\nTransform ggTp Mach1 Amp 37 pLYC76\n</code></pre> With these oligo sequences: <pre><code>oligo YB5F  gcacagctggccgcctataggGCTTTGATCGATTCAACCTCTGATCA\noligo YB5R  ccactgatcgaaagcatgacAGTACCTCTAAACACAACGACAACAG\n</code></pre> Where <code>gTpDXS</code> is the synthesized dsDNA fragment encoding the RC part with appropriate overlaps. It is available in the Maps folder.</p>"},{"location":"oligo_design/#oligo-based-cloning","title":"\ud83e\uddea Oligo-Based Cloning","text":"<ul> <li>Uses primers and a DNA template (e.g., genomic or plasmid).</li> <li>Best for shorter regions or point mutations.</li> <li>Covered in earlier tutorials\u2014see Construction Files for format.</li> </ul> <p>CF Example (gene synthesis with Golden Gate): <pre><code>PCR oTpDXSf oTpDXSr CP033902 pcrTp\nPCR GB5F GB5R pLYC72I back72\nGoldenGate pcrTp back72 BsaI ggTp\nTransform ggTp Mach1 Amp 37 pLYC76\n</code></pre> With these oligo sequences: <pre><code>oligo oTpDXSf  ccataGGTCTCaTACTgtcatgctttcgatcagtgg\noligo oTpDXSr  cagttGGTCTCtAAGCcctataggcggccagctgtgc\noligo GB5F ccataGGTCTCaGCTTTGATCGATTCAACCTCTGATCA\noligo GB5R cagttGGTCTCtAGTACCTCTAAACACAACGACAACAG\n</code></pre></p> <p>In practice, the TpDXS gene contains an internal BsaI site, which disqualifies it from direct Golden Gate cloning using the native genomic sequence. While it could be repaired using SOEing, the decision tree points us toward clonal gene synthesis as the preferred strategy. This is the method used in the example files.</p> <p>In contrast, the Aliivibrio fischeri ortholog (GenBank: CP160629.1) lacks internal BsaI/BsmBI sites and meets the criteria for PCR-based cloning from genomic DNA.</p> <p>As a result, two constructs were designed in this experiment:</p> <ul> <li>pLYC76: The Trueperella pyogenes variant of dxs cloned into pLYC72I via gene synthesis</li> <li>pLYC77: The Aliivibrio fischeri variant of dxs cloned into pLYC72I via PCR</li> </ul> <p>Once you select a fabrication strategy for each construct, you must write corresponding Construction Files and place them in your <code>Construction/</code> folder. Reference example CFs in:</p> <p>cloning-tutorials/examples/</p> <p>Any oligos required for your strategy should be collected into a single file, in our example named: <pre><code>lycopene33 - Oligos.txt\n</code></pre></p> <p>Finally, include annotated GenBank files for all precursor and product plasmids, as well as any sequences that contributed to your design. These should be placed in your <code>Maps/</code> folder.</p> <p>For the Lycopene33 experiment, this results in:</p> <ul> <li> <p>2 Construction Files (pLYC76 and pLYC77)</p> </li> <li> <p>2 product GenBank files (one for each construct)</p> </li> <li> <p>1 gene synthesized plasmid</p> </li> <li> <p>4 oligos</p> </li> </ul>"},{"location":"pcr_prediction/","title":"3. PCR Product Prediction","text":""},{"location":"pcr_prediction/#pcr-product-prediction","title":"PCR Product Prediction","text":"<p>In this module, you'll learn how to manually predict the result of a PCR reaction by reasoning through oligo binding, template strand directionality, and sequence construction \u2014 a critical step before performing any cloning experiment. This manual prediction process is foundational for verifying whether a cloning strategy will work as intended. While there are many tools and algorithms to help you design a cloning plan, this step is about checking whether that plan is correct. It's a skill you'll often use in the lab when results are unclear and you need to troubleshoot. Going through this process also deepens your understanding of how PCR works and how different sequence elements interact.</p>"},{"location":"pcr_prediction/#before-you-try-this","title":"Before You Try This...","text":"<p>Want a refresher on how PCR works at a mechanistic level? Watch this short, animated video:</p> <p>\ud83d\udcfa Recommended Intro: PCR Animation \u2013 The Polymerase Chain Reaction</p>"},{"location":"pcr_prediction/#guided-walkthrough","title":"Guided Walkthrough","text":"<p>We\u2019ll begin with a simple scenario using a structured table format called <code>cf_shorthand</code>. You\u2019ll encounter this notation in later tutorials, but here we\u2019ll treat it as a straightforward summary of oligos and templates.</p> <pre><code>operation    primer1      primer2      template    product\nPCR          exFor        exRev        pTemp1      pcrpdt\n\noligo        exFor        CAGCGGATCGGATCGGCGAC\noligo        exRev        CGGTTGTGCGGGCGGAACCAG\nplasmid      pTemp1       CTGGTGACCCAGCGGATCGGATCGGCGACCCAAAGCGCCTGGTTCCGCCCGCACAACCGCGA\n</code></pre> <p>We have two primers (<code>exFor</code> and <code>exRev</code>) and a circular template plasmid (<code>pTemp1</code>). The task is to predict the PCR product, <code>pcrpdt</code>.</p> <ol> <li> <p>Search for the exact sequence of <code>exFor</code> in the template \u2014 it should match directly.</p> </li> <li> <p>Take the reverse complement of <code>exRev</code>, then search for that in the template.</p> </li> <li> <p>The product is the linear sequence between (and including) the forward primer and the reverse complement of the reverse primer.</p> </li> </ol> <p>Use your sequence editor to try this out yourself and compare your answer to the one below:</p>"},{"location":"pcr_prediction/#pcr-with-5-tails","title":"PCR with 5' Tails","text":"<p>Now try a more advanced case where primers have 5' extensions (tails):</p> <pre><code>operation    primer1     primer2     template     product\nPCR          exFor2      exRev2      pTemp1       pcrpdt2\n\noligo        exFor2      ccataGAATTCCAGCGGATCGGATCGGCGAC\noligo        exRev2      cagatGGATCCCTGGTTCCGCCCGCACAACCG\nplasmid      pTemp1      CTGGTGACCCAGCGGATCGGATCGGCGACCCAAAGCGCCTGGTTCCGCCCGCACAACCGCGA\n</code></pre> <p>Only the 3' end (the annealing region) of each primer must match the template exactly. Typically, that\u2019s about 18 bp. The 5' ends (e.g., <code>ccataGAATTC</code>) do not match but will become part of the product.</p> <ol> <li>Identify the annealing portion of each primer.</li> <li>Replace the annealing region in the template with the full primer (end included).</li> <li>Your product is the linear sequence spanning from full forward primer to full reverse primer (reverse complemented).</li> </ol> <p>Compare your answer to the one below:</p>"},{"location":"pcr_prediction/#inverse-pcr-ipcr-on-a-circular-template","title":"Inverse PCR (IPCR) on a Circular Template","text":"<p>\ud83d\udcfa Video demo: Watch how inverse PCR prediction works in ApE Use this as a reference before or after the steps below \u2014 it's especially helpful when you're ready to try the inverse PCR example.</p> <p>In IPCR, primers face away from each other on a circular template. Here\u2019s how prediction works:</p> <ol> <li>Find the annealing site of the forward primer.</li> <li>Set the sequence origin to just before that site \u2014 this \"rotates\" the plasmid to linearize it at that position.</li> <li>Reverse complement the reverse primer and find its match.</li> <li>Delete all sequence outside the range of the new forward and reverse primers.</li> <li>The resulting span is your predicted PCR product.</li> </ol>"},{"location":"pcr_prediction/#quiz-can-you-predict-this-product","title":"Quiz: Can You Predict This Product?","text":"<pre><code>operation    primer1     primer2     template   product\nPCR          qFor        qRev        pQ1        quizpdt\n\noligo        qFor        ccataCCATGGTTCTTGATTCGATACG\noligo        qRev        cagatCTCGAGTTAGTGCTGTTCGAGGTCCTG\nplasmid      pQ1         CACTCAAGGTTCAGGACCTCGAACAGCACTAACGGAAGAAATCCGATGGTTCTTGATTCGATACGTGGCCCCGAGGACCTCGCAT\n</code></pre> <p>Your task: What is the sequence of <code>quizpdt</code>?</p> <p>\ud83d\udcec Submit your prediction in the interactive quiz: \u2705 Launch the Quiz</p> <p>Answer (hover or click to reveal):</p> Show Answer <pre><code>ccataCCATGGTTCTTGATTCGATACGTGGCCCCGAGGACCTCGCATCACTCAAGGTTCAGGACCTCGAACAGCACTAACTCGAGatctg\n</code></pre> <p></p>"},{"location":"project_ispA/","title":"Ortholog Scan Project \u2014 ispA","text":"<p>This capstone exercise guides you through designing and documenting a complete cloning project centered on ispA, a key enzyme in the isoprenoid biosynthesis pathway. You\u2019ll build an ortholog expression panel in the context of plasmid pLYC72I. This gene presents more complexity than previous examples\u2014biochemical differences among orthologs can influence the outcome, making your selection and rationale especially meaningful.</p>"},{"location":"project_ispA/#project-overview","title":"Project Overview","text":"<p>Your goal is to follow the full cloning pipeline we've developed throughout the tutorial series. You\u2019ll prepare a complete project folder for an experiment called <code>lycopene34</code>, which includes design files, construction plans, lab documents, and a short writeup.</p> <p>Although this exercise is built around ispA, the tutorial doubles as a model for how to present any cloning-based project. You\u2019re encouraged to customize or extend it depending on your interests, as long as the documentation standards are met.</p>"},{"location":"project_ispA/#key-elements","title":"Key Elements","text":"<p>Your <code>lycopene34</code> project folder should include:</p> <ul> <li>Construction File(s) covering all planned builds</li> <li>Inventory, Oligos, and LabSheets</li> <li>Annotated GenBank files</li> <li>A <code>Docs/</code> folder with a written summary (as a <code>README.md</code>, Word doc, or PDF)</li> </ul> <p>The summary should explain:</p> <ul> <li>What the project is about</li> <li>The biology and context of the ispA gene</li> <li>Why you chose your orthologs (biochemical rationale, functional hypotheses, etc.)</li> <li>Any literature you consulted</li> </ul> <p>Use this document to guide the reader through the logic and goals of your experiment.</p> <p>For a reference format, see the example Docs folder from the <code>lycopene33</code> project. The lycopene33 README offers only a minimal discussion of ortholog selection. A more thorough analysis will require digging into the biochemistry of ispA and understanding how functional diversity informs design.</p>"},{"location":"project_ispA/#notes","title":"Notes","text":"<ul> <li>Tools like BLAST, Benchling, ApE, and C6-Tools are useful for ortholog selection and design.</li> <li>Use C6-Tools or CFS to simulate your Construction Files to catch errors.</li> <li>This project is your chance to demonstrate what you've learned\u2014how to plan and document a cloning experiment, how to design and simulate constructs, and how to connect biological rationale to your choices. Your submission should reflect a clear understanding of the experimental goal, how your design supports it, and the biochemical implications of your choices.</li> </ul>"},{"location":"project_ispA/#submission","title":"Submission","text":"<p>Submit a zipped copy of your completed <code>lycopene34</code> project folder.</p> <p>All students, regardless of project topic, are expected to document their projects in this format. The writeup should be appropriate to your specific experiment and guide the reader through your design and decisions.</p>"},{"location":"project_setup/","title":"Project Setup and Nomenclature","text":"<p>This guide outlines conventions for setting up and organizing a synthetic biology project. These conventions are intended to support clarity, reproducibility, and collaboration. The approach described here emphasizes a consistent, pre-planned structure for working with DNA and experiment metadata. While documentation systems vary across labs, any good system should have a clear scope, support structured naming, and promote project-wide consistency over time.</p>"},{"location":"project_setup/#defining-a-project","title":"Defining a Project","text":"<p>A project is an independent thread of research with a clear goal. Each project must have a unique, single-token name (e.g., <code>lycopene</code>). Avoid informal names or nicknames in documentation to maintain searchable and traceable records. </p> <p>When starting out, a project might begin with a narrow goal, but it will likely grow in complexity. Naming it consistently from the start ensures future experiments, constructs, and documentation stay aligned and searchable.</p> <p>Example:</p> <ul> <li>Project name: <code>lycopene</code></li> <li>Goal: Maximize lycopene production in E. coli.</li> </ul>"},{"location":"project_setup/#defining-an-experiment","title":"Defining an Experiment","text":"<p>An experiment is a bundled set of procedures (e.g., cloning, assays) conducted under a specific goal within a project. Experiments are named sequentially and prefixed by the project name (e.g., <code>lycopene33</code> is the 33rd experiment in the <code>lycopene</code> project).</p> <p>This deterministic naming also aids automation, indexing, and archiving of experiments. If experiment names are consistent, you can sort and filter results by project or experiment ID with confidence.</p>"},{"location":"project_setup/#plasmid-naming","title":"Plasmid Naming","text":"<p>Plasmids are named using a lowercase \u201cp\u201d and a project-specific prefix. Use sequential numbers:</p> <ul> <li>Format: <code>pLYC1</code>, <code>pLYC2</code>, ...</li> <li>Keep the length 4-6 characters to balance uniqueness with the ability to write it on a tube cap</li> <li>Do not use descriptive names like <code>StrongPromoterGGPPS-pLYC22</code>.</li> </ul> <p>Descriptive names, while initially helpful, tend to grow unwieldy and ambiguous. For example, what begins as 'StrongPromoterGGPPS-pLYC22' may later include more variables, making names long and inconsistent. Short names like pLYC22 can be reliably printed on tubes and cross-referenced with detailed annotations in maps and documentation.</p>"},{"location":"project_setup/#naming-synthetic-dnas","title":"Naming Synthetic DNAs","text":"<p>Synthetic DNAs include oligos, gBlocks, and synthesized plasmids. Like plasmids, naming consistency here is vital. Prefixes help clarify type and origin at a glance, which is especially useful when scanning inventory files or browsing digital folders.</p> <ul> <li>Oligos: Use <code>o&lt;PROJECT&gt;</code> prefix, e.g., <code>oLYC1</code>, <code>oLYC2</code></li> <li>GBlocks: Use <code>g&lt;PROJECT&gt;</code> prefix, e.g., <code>gLYC1</code></li> <li>Clonal Plasmids from synthesis: Follow plasmid naming conventions</li> <li>Oligo Pools: Optional <code>l&lt;PROJECT&gt;</code> prefix, e.g., <code>lLYC1</code></li> </ul>"},{"location":"project_setup/#folder-structure","title":"Folder Structure","text":"<p>On your computer, organize files by project and subfolders:</p> <p>To see a concrete example of this structure in practice, visit the example project directory in the course GitHub repository: cloning-tutorials/examples/lycopene </p> <p>All data should reside in a structured directory named exactly after the project. This top-level folder will house all planning documents, experimental results, and inventories. <pre><code>lycopene/\n\u251c\u2500\u2500 Docs/\n\u251c\u2500\u2500 Experiments/\n\u2514\u2500\u2500 Inventory/\n</code></pre></p> <ul> <li>Docs: Emails, publication notes, project overview</li> <li>Experiments: Each experiment has its own folder (<code>lycopene1</code>, <code>lycopene2</code>, ...)</li> <li>Inventory: Track all physical materials, organized by freezer (Minus20, Minus80, Fridge)</li> </ul> <p>In the <code>lycopene</code> example:</p> <ul> <li> <p><code>Docs/README.md</code> could contain a summary of the project goal or a link to relevant papers.</p> </li> <li> <p><code>Experiments/lycopene33/</code> holds folders like <code>Construction</code> and <code>Maps</code> where you'll see placeholders for your design and genbank files.</p> </li> </ul> <p>Example Experiment folder structure: <pre><code>lycopene33/\n\u251c\u2500\u2500 Construction/\n\u251c\u2500\u2500 Maps/\n\u251c\u2500\u2500 Sequencing/\n\u251c\u2500\u2500 Assays/\n\u2514\u2500\u2500 LabSheets/\n</code></pre></p> <p>This layout mirrors the workflow of a synthetic biology experiment\u2014from planning (Construction), to execution (Maps, Sequencing), to analysis (Assays), and finally lab-specific logistics (LabSheets).</p>"},{"location":"project_setup/#file-types-and-conventions","title":"File Types and Conventions","text":"<ul> <li>Construction files: <code>.txt</code></li> <li>DNA sequences: TSV format (IDT-style) or annotated Genbank files (<code>.seq</code>, <code>.gb</code>, <code>.ape</code>)</li> <li>Oligos under 60bp: 25nm scale; 60+bp: 100nm</li> <li>All naming and file conventions should match what is physically labeled in the lab.</li> </ul> <p>Proper formats reduce ordering errors, improve readability, and allow automated tools to validate or simulate designs. Genbank files should include full annotations for every promoter, CDS, terminator, origin, and sequencing primer site. TSV files should use standard fields as required by synthesis companies (e.g., IDT). </p> <p>Each sequence should only exist once in the repository. Avoid duplicating the same DNA sequence across multiple files or folders. Duplicates can easily drift apart \u2014 differing in name, annotation, or actual sequence \u2014 which leads to confusion and possible experimental error. Instead, reference the original file consistently throughout Construction Files and documentation.</p> <p>Following this structure allows for efficient collaboration, easier debugging, and better long-term data management.</p>"},{"location":"project_setup/#optional-github-integration","title":"Optional: GitHub Integration","text":""},{"location":"project_setup/#getting-started-with-github","title":"Getting Started with GitHub","text":"<p>If you are a BioE 140L student, you can ignore this entire GitHub section \u2014 it\u2019s optional for your course. You will work locally on your computer and submit a zipped version of your project folder at the end of the term.</p> <p>For all other users (iGEM project leads, master's students, PhD students, or postdocs), you are expected to use GitHub to manage your project. You do not need to create a repository yourself \u2014 your instructor will create one for you using an academic GitHub account and invite you as a collaborator. This ensures the project is properly managed and free under academic terms.</p> <p>Once your account is added to the repo, you\u2019ll be able to:</p> <ul> <li> <p>View your project from any browser</p> </li> <li> <p>Clone the repo to your computer</p> </li> <li> <p>Add new files, make edits, and sync them back to GitHub</p> </li> </ul> <p>If you are unfamiliar with GitHub, you do not need to learn command-line Git. Instead, use GitHub Desktop, a free graphical application.</p> <p>To get started:</p> <ol> <li> <p>Install GitHub Desktop.</p> </li> <li> <p>Visit your repository page (you will receive a link, click it when you see it because they expire).</p> </li> <li> <p>Click the green \"Code\" button and select \"Open with GitHub Desktop\".</p> </li> <li> <p>Follow prompts to clone the repo to your computer.</p> </li> <li> <p>Make edits as usual, then use the GitHub Desktop interface to commit and push changes.</p> </li> </ol> <p></p> <p>To learn the essential GitHub vocabulary and actions, refer to this focused introduction: GitHub: Hello World Guide It explains key concepts like \u201ccloning a repository,\u201d \u201ccommitting changes,\u201d and \u201cpushing updates.\u201d There are also many video tutorials online, and tools like ChatGPT can help if you get stuck.</p> <p>This tutorial site is itself hosted in a GitHub repository. You can view the course repo here: cloning-tutorials GitHub repo And the example project directory: examples/</p>"},{"location":"project_setup/#documenting-experiments-with-github-issues","title":"Documenting Experiments with GitHub Issues","text":"<p>Each experiment (e.g., <code>lycopene33</code>) should have a corresponding GitHub Issue in your repository, which you can find by clicking the \u201cIssues\u201d tab at the top of the repo page (see screenshot above).</p> <ul> <li> <p>Add dated updates describing what you did in lab on a given day, including links to data files or images, and what you observed</p> </li> <li> <p>Upload photos of plates, gels, or cultures</p> </li> <li> <p>Record observations, commentary, and troubleshooting</p> </li> <li> <p>Discuss results or link to analysis charts</p> </li> </ul> <p>The first block in each issue should clearly explain the goal of the experiment. The writing should assume that another student may be reading it later, so:</p> <ul> <li> <p>Use proper names (e.g., <code>pLYC33</code> instead of \u201cthe plasmid\u201d)</p> </li> <li> <p>Avoid internal shorthand that wouldn\u2019t be clear to others</p> </li> <li> <p>Be specific about which clone or construct is being used</p> </li> </ul> <p>Although your repo may be private now, it may be made public in the future. Write with that audience in mind.</p> <p>An example issue for <code>lycopene33</code> is provided in the cloning repo:  lycopene33 issue</p>"},{"location":"sequence_analysis/","title":"Sequence Retrieval and Analysis","text":"<p>In this tutorial, you will learn how to retrieve the sequence of a gene from another organism and prepare it for cloning. Our goal is to perform an ortholog scan of the dxs gene as part of the Lycopene33 optimization experiment. We will search for alternative versions of dxs from different species, extract their RBS.CDS sequences, and prepare those sequences to build RC parts that match the TP.RC part architecture.</p> <p>The process includes:</p> <ul> <li> <p>Identifying orthologs via BLAST</p> </li> <li> <p>Extracting upstream and downstream flanking sequences</p> </li> <li> <p>Verifying gene boundaries</p> </li> <li> <p>Preparing the sequence for cloning</p> </li> </ul>"},{"location":"sequence_analysis/#step-by-step-workflow","title":"Step-by-Step Workflow","text":""},{"location":"sequence_analysis/#1-identify-your-starting-sequence","title":"1. Identify Your Starting Sequence","text":"<p>Begin with a known working version of the dxs gene from E. coli MG1655. You\u2019ll need the CDS (coding DNA sequence), and ideally the 200 bp upstream (pre) and downstream (post) flanking sequences. These will help identify the ribosome binding site and define PCR primers if you\u2019re cloning from genomic DNA.</p>"},{"location":"sequence_analysis/#2-translate-the-cds-to-protein","title":"2. Translate the CDS to Protein","text":"<p>Using a sequence editor such as ApE, paste in the dxs CDS and use the \"Translate\" function to convert it to its corresponding amino acid sequence.</p>"},{"location":"sequence_analysis/#3-run-a-blastp-search","title":"3. Run a BLASTP Search","text":"<p>BLASTP is a search tool that compares your protein sequence to a vast database of known protein sequences maintained by NCBI. Nearly all public genomic and protein data are included in this database, and BLASTP has indexed these sequences in a way that allows it to quickly find similar entries.</p> <p>Go to BLASTP and:</p> <ul> <li>Paste in your protein sequence (e.g., the translated dxs from E. coli).</li> <li>Decide how broadly to search. You have several options:</li> <li>Option 1: Leave the organism box blank to search across all known species. This is useful for broad ortholog discovery.</li> <li>Option 2: Enter a species, genus, or higher-level taxon (e.g., Arthrobacter, Firmicutes) to limit your search.</li> <li>Option 3: If you're cloning from a specific DNA source (e.g., genomic DNA in your freezer), constrain your search to that species.</li> <li>Option 4: If you're synthesizing all sequences, a broad search is fine\u2014you don\u2019t need to limit to organisms with accessible DNA.</li> <li>Click BLAST to begin the search.</li> </ul> <p>When results appear, look for hits with the correct annotation (e.g., \u201c1-deoxy-D-xylulose-5-phosphate synthase\u201d). If the organism name seems unfamiliar, check whether it\u2019s a renamed or synonymous species\u2014taxonomy often evolves over time.</p>"},{"location":"sequence_analysis/#4-select-a-divergent-protein-sequence","title":"4. Select a Divergent Protein Sequence","text":"<p>Sequence identity is a percentage score indicating how similar two proteins are based on their aligned amino acid sequences.</p> <p>Review the BLASTP results and avoid picking a 100% identity hit \u2014 those are usually redundant and uninformative. Instead, choose a result with high but not identical similarity (typically in the 70\u201395% identity range). Historically, a sequence identity of 95% or higher has been considered \"substantially identical\" in legal and patent contexts, potentially affecting novelty. Meanwhile, sequences around 70% identity are often functionally similar, though they may differ in properties like substrate specificity.</p> <p>In choosing which hits to pursue:</p> <ul> <li> <p>Avoid very high identity hits unless you're testing subtle variations.</p> </li> <li> <p>Prefer hits that retain the correct annotation (e.g., \u201c1-deoxy-D-xylulose-5-phosphate synthase\u201d), even at lower identities. These may be identified by more sophisticated gene prediction tools than BLAST alone.</p> </li> <li> <p>Consider building a phylogenetic tree to select hits from distinct clades. This helps you sample evolutionary space broadly and then refine with follow-up experiments.</p> </li> <li> <p>Consider using newer bioinformatics or AI tools.  This is a rapidly developing research topic.</p> </li> </ul> <p>Ultimately, the performance of orthologs in a heterologous host (like E. coli) is influenced by many factors \u2014 expression level, folding, temperature, pH, codon usage, RNA structure, and unknown interactions. Empirically testing a diverse panel is often the best approach.</p>"},{"location":"sequence_analysis/#5-use-tblastn-to-find-the-dna","title":"5. Use TBLASTN to Find the DNA","text":"<p>To proceed with cloning or part design, you\u2019ll need the actual DNA sequence of the ortholog \u2014 including the untranslated upstream region if you're capturing the native ribosome binding site. While one option is to reverse-translate the protein sequence and design an RBS using a prediction algorithm, a more reliable strategy \u2014 especially when transferring genes from one prokaryote to another \u2014 is to use the native DNA sequence. This native sequence has already been shaped by evolutionary selection to function in its original context and is more likely to express successfully in E. coli than a synthetic design. Additionally, if you plan to amplify the sequence from genomic DNA or an existing plasmid, you must use the actual sequence so that your primers anneal correctly. </p> <p>In some cases, the protein\u2019s NCBI entry may include a direct link to the gene or CDS that encodes it. If not, you can find the encoding DNA using a second BLAST search \u2014 specifically, TBLASTN \u2014 that takes your protein query and returns matching DNA hits.</p> <p>Go to TBLASTN and:</p> <ul> <li> <p>Paste in the protein sequence from the previous step.</p> </li> <li> <p>Run the search.</p> </li> </ul> <p>Look for a match with near 100% identity \u2014 this ensures you\u2019re retrieving the exact DNA sequence that encodes your selected protein, not just a similar ortholog. Unlike the initial BLASTP search, where sequence variation was valuable, here we want the specific nucleotide sequence that produced the protein you selected, since this is the actual DNA you\u2019ll need for synthesis or PCR. Click the link for the matching hit, then follow the GenBank link to access the full nucleotide record.</p>"},{"location":"sequence_analysis/#6-extend-the-genomic-region","title":"6. Extend the Genomic Region","text":"<p>In the GenBank page, adjust the displayed sequence region to obtain 5' and 3' UTR:</p> <ul> <li> <p>Extend ~200 bp upstream and ~200 bp downstream from the gene (CDS) hit.</p> </li> <li> <p>Use the \u201cChange region shown\u201d box to set the coordinates.</p> </li> </ul> <p>Click Update View, then download the GenBank file using Send to &gt; File &gt; GenBank (full record).</p>"},{"location":"sequence_analysis/#7-confirm-the-gene-boundaries","title":"7. Confirm the Gene Boundaries","text":"<ul> <li> <p>Ensure the CDS starts with ATG, GTG, or TTG.</p> </li> <li> <p>Confirm it ends with TAA, TAG, or TGA.</p> </li> <li> <p>Check that the orf is in the forward direction and not reverse complemented</p> </li> <li> <p>Translate the orf and confirm it matches your expectations.</p> </li> </ul> <p>Extract the pre, CDS, and post regions and paste them into your working spreadsheet.</p> <p>Also record the GenBank accession number and source organism.</p> <p>Extract the pre, CDS, and post regions and paste them into your working spreadsheet. Also record the GenBank accession number and source organism.</p> <p>We recommend organizing this data in a spreadsheet, such as Google Sheets, similar to the format shown in the video. The sheet should include columns for:</p> <ul> <li> <p>Organism name</p> </li> <li> <p>Whether an ortholog is present</p> </li> <li> <p>The 200 bp pre (upstream) region</p> </li> <li> <p>The CDS</p> </li> <li> <p>The 200 bp post (downstream) region</p> </li> <li> <p>Accession number</p> </li> </ul> <p>Here is an example of what the spreadsheet might look like:</p> <pre><code>organism    dxs?    pre200  CDS post200 accession\nE. coli MG1655  yes ttggtcattaag    atgagt  tccctactcc  CP032667.1\n</code></pre> <p>This spreadsheet can live outside of your GitHub repo (e.g., in Google Drive). While tools like Benchling or C6-tools may be used for sequence design and analysis, the essential outputs \u2014 Construction Files, LabSheets, and final sequence files \u2014 must be included in the GitHub repository. Any other design or analysis materials may be linked from your GitHub issues or stored separately, but we recommend downloading and archiving them in your <code>Docs/</code> folder for long-term preservation.</p> <p>For BioE 140L students: download your final Google Sheet when done and include it in your project folder as a backup.</p>"},{"location":"sequence_analysis/#video-walkthrough","title":"Video Walkthrough","text":""},{"location":"sequence_analysis/#from-ortholog-sequence-to-rc-part","title":"From Ortholog Sequence to RC Part","text":"<p>Once you\u2019ve retrieved the ortholog sequence and its surrounding context (pre200, CDS, and post200), the next step is to construct an RC part that conforms to the TP.RC format used throughout this tutorial.</p> <p>Here\u2019s how to do it:</p>"},{"location":"sequence_analysis/#1-identify-the-rbs-region","title":"1. Identify the RBS Region","text":"<p>The ribosome binding site (RBS) is generally found within the final 30 bp of the pre200 region. It usually appears 8\u201315 bp upstream of the start codon (ATG, GTG, or TTG) and resembles a Shine-Dalgarno\u2013like sequence such as <code>AGGAGG</code>. You'll want to include this entire RBS and its precise spacing to the start codon in your part.</p>"},{"location":"sequence_analysis/#2-choose-a-5-linker","title":"2. Choose a 5\u2032 Linker","text":"<p>The linker is a 20 bp sequence upstream of the RBS that will serve as the forward PCR priming site and provide standard flanking homology. Search within the pre200 region, typically between \u2212100 and \u221215 relative to the start codon, for a well-behaved primer binding sequence (good GC content, no hairpins, balanced melting temp, etc.). This will become your 5\u2032 linker. The RBS is then defined as the sequence between the 5\u2032 linker and the start codon.</p>"},{"location":"sequence_analysis/#3-choose-a-3-linker","title":"3. Choose a 3\u2032 Linker","text":"<p>For the 3\u2032 linker, look for a 20 bp sequence downstream of the CDS within the post200 region. This should lie beyond the stop codon and meet similar criteria for a good primer binding site.</p>"},{"location":"sequence_analysis/#4-build-the-rc-part","title":"4. Build the RC Part","text":"<p>Once you\u2019ve identified:</p> <p>Once you\u2019ve defined your 5\u2032 linker, RBS, CDS, and 3\u2032 linker, you now have everything needed to construct an RC part compatible with the TP.RC system.</p> <p>The design and construction process is the same as described in the Design Principles tutorial. There, you practiced building an RC part using known sequences and assembling them into a standard format. In this case, you\u2019ll apply that same process using the ortholog data you\u2019ve just collected.</p> <p>To recap, your RC part will contain:</p> <ul> <li> <p>A 5\u2032 BsaI recognition site followed by a sticky end (<code>TACT</code>)</p> </li> <li> <p>The 5\u2032 linker sequence</p> </li> <li> <p>The RBS sequence</p> </li> <li> <p>The full CDS (starting with ATG/GTG/TTG, ending in a stop codon)</p> </li> <li> <p>The 3\u2032 linker sequence</p> </li> <li> <p>A 3\u2032 sticky end (<code>GCTT</code>) followed by the reverse BsaI recognition site</p> </li> </ul> <p>Make sure the full sequence has no internal BsaI sites. This is critical for Golden Gate assembly, as internal BsaI sites will cause unwanted cuts. If you're ordering a synthetic fragment (e.g., GBlock or clonal synthesis), you can eliminate all internal BsaI, BsmBI, and other Type IIS or common restriction sites (e.g., BglBrick, BioBrick) via silent mutations. C6-Tools include a <code>remove_sites</code> function to automate this cleanup.</p> <p>If you're cloning from genomic DNA, internal BsaI sites must be removed during cloning. A single site can often be mutated using SOEing or Gibson assembly with an altered primer. But if multiple sites are present, synthesis is usually easier and more reliable. Alternatively, you can choose orthologs that don\u2019t contain problematic sites to avoid complications altogether.</p> <p>You can create this RC part in multiple ways:</p> <ul> <li> <p>Synthetic gene block (GBlock) ordered with BsaI sites and tails</p> </li> <li> <p>PCR from genomic or plasmid DNA using primers that extend the linkers and BsaI sites and 5' tails</p> </li> <li> <p>Clonal synthesis through a gene synthesis vendor</p> </li> </ul> <p>Refer back to the RC part design quiz in the previous tutorial if you need a refresher on format logic. Once built, these RC parts can be mixed and matched in your construct to evaluate ortholog performance.</p>"},{"location":"sequence_tools/","title":"Sequence Tools","text":""},{"location":"sequence_tools/#introduction","title":"Introduction","text":"<p>Sequence editing tools are essential for molecular biology and bioinformatics, allowing researchers to manipulate and analyze DNA sequences effectively. These tools range from graphical interfaces designed for ease of use to powerful command-line utilities and programming libraries.</p>"},{"location":"sequence_tools/#tools-overview","title":"Tools Overview","text":"Tool Name Pros Cons ApE (A Plasmid Editor) - Course demonstrations will be done in ApE.- Simple interface- Efficient auto-annotation- Supports multiple file formats - Lacks cloud collaboration features- Limited automation capabilities. Benchling - Real-time collaboration- Extensive documentation- Integrates well with other laboratory tools. - Requires an internet connection- Subscription required for advanced features. SnapGene - User-friendly- Excellent visualization tools- Supports automatic primer design and cloning workflows. - Paid software with limited free version capabilities. UGENE - Free- Supports a wide range of sequence analysis tools- Allows scripting. - Interface can be complex for beginners. Biopython - Highly customizable- Integrates well with other computational tools. - Requires programming knowledge. EMBOSS - Wide range of utilities for sequence alignment, translation, and annotation. - Command-line interface can be intimidating for beginners. Seqtk - Extremely fast- Suitable for large-scale datasets. - Limited functionality compared to larger toolkits. Geneious - Comprehensive features including primer design, alignment, and phylogenetics. - Paid software with a high subscription cost."},{"location":"sequence_tools/#selection-guide","title":"Selection Guide","text":"<ul> <li>If you prefer a simple graphical tool, start with ApE.  </li> <li>If you need cloud-based collaboration, choose Benchling.  </li> <li>If you want advanced visualization and cloning workflows, consider SnapGene.  </li> <li>If you are comfortable with scripting, use Biopython or EMBOSS.  </li> <li>If you need high-performance sequence processing, try Seqtk.  </li> </ul> <p>This document will focus on ApE, Benchling, and Biopython, providing tutorials on how to get started and perform essential sequence operations.</p>"},{"location":"sequence_tools/#ontology-of-operations","title":"Ontology of Operations","text":"<ul> <li>Search: Finding specific sequences or patterns within a larger sequence. Refer back to the tutorials for practical examples.</li> <li>Copy: Duplicating a sequence or a portion of it to the clipboard for further use.</li> <li>Paste: Inserting the content of the clipboard into your sequence.</li> <li>Reverse Complement: Generating the reverse complement of a DNA sequence.</li> <li>Translate: Converting a nucleotide sequence into its corresponding protein sequence using the genetic code.</li> <li>Annotate: Adding biological information to a sequence, such as gene names or functional regions.</li> <li>Digest: Cutting a DNA sequence at specific sites using restriction enzymes.</li> <li>Rotate: Shifting the sequence in a circular manner.</li> <li>Feature Management: The process of importing and managing custom features in tools like ApE and Benchling.</li> </ul>"},{"location":"sequence_tools/#ape","title":"ApE","text":""},{"location":"sequence_tools/#download-and-install-ape","title":"Download and Install ApE","text":"<p>Download and install ApE from the official website: ApE Download Page</p>"},{"location":"sequence_tools/#update-features-and-enzymes-in-ape","title":"Update Features and Enzymes in ApE","text":"<p>To ensure ApE recognizes the latest feature annotations and enzyme files, follow these steps:</p>"},{"location":"sequence_tools/#step-1-set-up-a-storage-folder","title":"Step 1: Set Up a Storage Folder","text":"<ol> <li>Create an empty folder on your computer to store the updated feature list.</li> </ol>"},{"location":"sequence_tools/#step-2-configure-ape-settings","title":"Step 2: Configure ApE Settings","text":"<ol> <li>Open ApE and navigate to ApE &gt; Settings... </li> <li>Click the Files tab.  </li> <li>Under Default Feature Directory, click Move Directory, select the newly created folder, and click OK.  </li> <li>Repeat this for Default Enzymes Directory.  </li> <li>Click OK to close the settings window. ApE will generate default versions of these files in the folder.</li> </ol>"},{"location":"sequence_tools/#step-3-download-and-replace-feature-files","title":"Step 3: Download and Replace Feature Files","text":"<ul> <li>Download and unzip the updated files: Download Default Features</li> </ul>"},{"location":"sequence_tools/#step-4-load-the-updated-feature-library","title":"Step 4: Load the Updated Feature Library","text":"<ol> <li>In ApE, go to Features &gt; Open Feature Library... </li> <li>Navigate to <code>default_features.txt</code> in the unzipped folder and select it.  </li> <li>Click OK to confirm and exit.  </li> </ol>"},{"location":"sequence_tools/#performing-operations-in-ape","title":"Performing Operations in ApE","text":"<ul> <li>Search: Use Edit &gt; Find in the toolbar or press Command + F. To search both strands, check the Also find rev-com of string option. You can use N's as wildcards in your search. Choose to either select or highlight the sequence using the provided button options.</li> <li>Copy: Select the sequence using your mouse, then go to Edit &gt; Copy, or press Command + C. To copy the reverse complement, use Edit &gt; Copy Rev Com.</li> <li>Paste: Place your cursor where you want to insert the clipboard contents, then go to Edit &gt; Paste, or press Command + V.</li> <li>Reverse Complement: Select the sequence and use Edit &gt; Reverse-Complement to modify it directly. Alternatively, use Edit &gt; Copy Rev Com to copy the reverse complement to the clipboard without modifying the original sequence.</li> <li>Translate: Use ORFs &gt; Translate... to translate the highlighted sequence. Options allow displaying single-letter amino acids, triplet codes, and including/excluding the original DNA sequence.</li> <li>Annotate: Manually add a feature by highlighting a sequence, then go to Features &gt; New Feature to name it and assign a color. Press Command + K to auto-annotate all features in the Feature Library. Add new features under Features &gt; Edit Feature Library....</li> <li>Digest: Open Enzyme &gt; Enzyme Selector, select enzymes of interest, and click Highlight to mark their cut sites.</li> <li>Rotate: Place your cursor where you want the new origin, then go to Edit &gt; Set Origin. This function is only available when the sequence is marked as circular, indicated by the Linear/Circular toggle button in the editor window.</li> </ul> <p>You can turn off the double-stranded view under ApE &gt; Settings and uncheck the Inline Features option.</p>"},{"location":"sequence_tools/#benchling","title":"Benchling","text":""},{"location":"sequence_tools/#getting-started-with-benchling","title":"Getting Started with Benchling","text":"<ul> <li>Create an account on Benchling and log in.</li> <li>Familiarize yourself with the interface and available tools.</li> </ul>"},{"location":"sequence_tools/#uploading-features-and-autoannotation","title":"Uploading Features and Autoannotation","text":"<ul> <li>Navigate to Settings \u2192 Feature Libraries.</li> <li>Click Upload Feature Library.</li> <li>Provide a <code>.csv</code> file where column 1 is the feature name and column 2 is the feature sequence. Ensure there are no extra spaces or formatting issues that could cause import errors.</li> <li>Use <code>default_features.txt</code> for your feature file as a reference for formatting.</li> <li>Save the library and use the Auto-annotate feature on a new sequence to apply the annotations.</li> </ul>"},{"location":"sequence_tools/#performing-operations-in-benchling","title":"Performing Operations in Benchling","text":""},{"location":"sequence_tools/#search","title":"Search","text":"<ol> <li>Open your sequence in Benchling.</li> <li>Click on the magnifying glass (\ud83d\udd0d) icon in the toolbar or press Ctrl + F (Cmd + F on Mac).</li> <li>Type the sequence or pattern you want to find.</li> <li>To search both strands, enable the \"Search reverse complement\" option.</li> <li>Matching sequences will be highlighted; click Next or Previous to navigate between results.</li> </ol>"},{"location":"sequence_tools/#copy","title":"Copy","text":"<ol> <li>Click and drag to select a sequence region or use the sequence navigator.</li> <li>Right-click and select Copy, or press Ctrl + C (Cmd + C on Mac).</li> <li>The copied sequence can now be pasted into another sequence, document, or external program.</li> </ol>"},{"location":"sequence_tools/#reverse-complement","title":"Reverse Complement","text":"<ol> <li>Select the sequence region you want to reverse complement.</li> <li>Click More Tools (\u2699\ufe0f) &gt; Reverse Complement in the toolbar.</li> <li>The sequence will be transformed in place.</li> </ol>"},{"location":"sequence_tools/#translate","title":"Translate","text":"<ol> <li>Highlight the DNA sequence you wish to translate.</li> <li>Click More Tools (\u2699\ufe0f) &gt; Translate.</li> <li>Select the reading frame (e.g., Frame 1, 2, 3).</li> <li>The translated amino acid sequence will appear below the DNA.</li> </ol>"},{"location":"sequence_tools/#annotate","title":"Annotate","text":"<ol> <li>Highlight a region of your sequence.</li> <li>Click Annotate in the toolbar.</li> <li>Enter a Feature Name, select a Feature Type, and assign a color.</li> <li>Click Save to apply the annotation.</li> </ol>"},{"location":"sequence_tools/#digest","title":"Digest","text":"<ol> <li>Click More Tools (\u2699\ufe0f) &gt; Digest.</li> <li>Select the Restriction Enzymes you want to use.</li> <li>Click Digest to visualize the cut sites on your sequence.</li> </ol>"},{"location":"sequence_tools/#rotate","title":"Rotate","text":"<ol> <li>Click More Tools (\u2699\ufe0f) &gt; Set Origin.</li> <li>Select a new position for the sequence origin.</li> <li>Click Apply to shift the sequence.</li> </ol>"},{"location":"sequence_tools/#biopython","title":"Biopython","text":"<p>Biopython provides programmatic sequence editing capabilities. For practical examples, refer to the Colab notebook: Google Colab Biopython Tutorial. The Colab contains implementations of all described operations in Python.</p>"}]}